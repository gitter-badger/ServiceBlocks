<?xml version="1.0"?>
<doc>
    <assembly>
        <name>iFOREX.Collections</name>
    </assembly>
    <members>
        <member name="T:iFOREX.Collections.ComparerFactory">
            <summary>
            Encapsulates the logic for constructing CustomEqualityComparer instances.
            </summary>
        </member>
        <member name="M:iFOREX.Collections.ComparerFactory.BuildComparer``2(System.Func{``0,``1})">
            <summary>
            Returns a CustomEqualityComparer instance that compares instances of type TSource based on the equality of its property
            of type TProperty.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="propertyGetter">A function that returns the property of type TProperty by which instances of type TSource should be compared.</param>
            <returns></returns>
        </member>
        <member name="M:iFOREX.Collections.ComparerFactory.BuildComparer``3(System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Returns a CustomEqualityComparer instance that compares instances of type TSource based on the equality of two properties
            of type TP1 and TP2.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TP1"></typeparam>
            <typeparam name="TP2"></typeparam>
            <param name="property1Getter">A function that returns the property of type TProperty1 by which instances of type TSource should be compared.</param>
            <param name="property2Getter">A function that returns the property of type TProperty2 by which instances of type TSource should be compared.</param>
            <returns></returns>
        </member>
        <member name="M:iFOREX.Collections.ComparerFactory.BuildComparer``4(System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,``3})">
            <summary>
            Returns a CustomEqualityComparer instance that compares instances of type TSource based on the equality of three properties
            of type TP1 and TP2 and TP3.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TP1"></typeparam>
            <typeparam name="TP2"></typeparam>
            <param name="property1Getter">A function that returns the property of type TP1 by which instances of type TSource should be compared.</param>
            <param name="property2Getter">A function that returns the property of type TP2 by which instances of type TSource should be compared.</param>
            <param name="property3Getter">A function that returns the property of type TP3 by which instances of type TSource should be compared.</param>
            <returns></returns>
        </member>
        <member name="M:iFOREX.Collections.ComparerFactory.BuildComparer``5(System.Func{``0,``1},System.Func{``0,``2},System.Func{``0,``3},System.Func{``0,``4})">
            <summary>
            Returns a CustomEqualityComparer instance that compares instances of type TSource based on the equality of four properties
            of type TP1 and TP2 and TP3 and TP4.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TP1"></typeparam>
            <typeparam name="TP2"></typeparam>
            <param name="property1Getter">A function that returns the property of type TP1 by which instances of type TSource should be compared.</param>
            <param name="property2Getter">A function that returns the property of type TP2 by which instances of type TSource should be compared.</param>
            <param name="property3Getter">A function that returns the property of type TP3 by which instances of type TSource should be compared.</param>
            <param name="property4Getter">A function that returns the property of type TP4 by which instances of type TSource should be compared.</param>
            <returns></returns>
        </member>
        <member name="T:iFOREX.Collections.CustomEqualityComparer`1">
            <summary>
            A class to plug in when an IEqualityComparer is required, whose comparison method is specified in the constructor.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:iFOREX.Collections.CustomEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
            <param name="comparer">The Func to use to compare elements.</param>
        </member>
        <member name="M:iFOREX.Collections.FixedSizeList`1.#ctor(System.Int32)">
            <summary>
            </summary>
            <param name="size">Please refer to DataContracts.Constants.FixedSizeListMaxValues for predefined collection sizes</param>
        </member>
        <member name="T:iFOREX.Collections.CollectionItem`1">
            <summary>
            Wraps and is implicitly convertable to an object of type T, making the wrapped object eligible to be used as an ICollectionKey.
            </summary>
            <typeparam name="T">The type to wrap as an ICollectionKey.</typeparam>
        </member>
        <member name="T:iFOREX.Collections.PairList`2">
            <summary>
            Represents a List of KeyValuePairs that is not constrained to having unique keys.
            This collection is NOT optimized!
            </summary>
        </member>
        <member name="M:iFOREX.Collections.PairList`2.#ctor(System.Collections.Generic.IEqualityComparer{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            The IEqualityComparer implementation to use when comparing items, or null to compare items using the default
            equality-comparer for type TKey.
            </summary>
            <param name="comparer"></param>
        </member>
    </members>
</doc>
