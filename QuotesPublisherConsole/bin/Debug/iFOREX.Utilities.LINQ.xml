<?xml version="1.0"?>
<doc>
    <assembly>
        <name>iFOREX.Utilities.LINQ</name>
    </assembly>
    <members>
        <member name="M:iFOREX.Utilities.LINQ.Data.ContextContainer`1.#ctor(`0,System.Boolean)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="isPrivate">
            True if the ContextContainer is the sole owner of the data-context and should dispose of it when it itself is disposed.
            False if the data-context is owned by a unit-of-work or other higher-level entity.
            </param>
        </member>
        <member name="M:iFOREX.Utilities.LINQ.Data.LinqRepository`1.UpdateDataLoadOptions(System.Data.Linq.DataLoadOptions)">
            <summary>
            Can be overriden to modify the data-load-options that are applied to the data-context whenever it is retrieved
            using one of the protected helper methods.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iFOREX.Utilities.LINQ.Data.LinqRepository`1.UpdateAndVerifyContext(`0)">
            <summary>
            Can be overriden to modify and verify that the provided context can be used by the deriving repository.
            </summary>
            <returns></returns>
        </member>
        <member name="M:iFOREX.Utilities.LINQ.Data.LinqRepository`1.GetReadOnlyDataContext">
            <summary>
            If an ambient context exists, it is returned (even if it is not read-only);
            otherwise returns a new, private, data-context, optimized for reads.
            </summary>
            <remarks>
            Setting ObjectTrackingEnabled to false yields improved performance.
            </remarks>
        </member>
        <member name="M:iFOREX.Utilities.LINQ.Data.LinqRepository`1.GetDataContext">
            <summary>
            If an ambient AspNetDbDataContext exists, it is returned, otherwise returns a new, private context.
            </summary>
        </member>
        <member name="M:iFOREX.Utilities.LINQ.Data.LinqRepository`1.GetAmbientDataContext">
            <summary>
            Returns the AspNetDbDataContext from the ambient unit-of-work. Throws an <see cref="T:System.InvalidOperationException"/>
            if an ambient context does not exist.
            </summary>
        </member>
        <member name="M:iFOREX.Utilities.LINQ.Data.LinqUnitOfWork.Commit">
            <summary>
            Submits any changes made via the encapsulated DataContext to the database.
            </summary>
        </member>
        <member name="M:iFOREX.Utilities.LINQ.Operators.CustomLINQ.IsEmpty(System.Collections.IEnumerable)">
            <summary>
            Returns true if the sequence contains no elements, otherwise returns false.
            </summary>
        </member>
        <member name="M:iFOREX.Utilities.LINQ.Operators.CustomLINQ.AllEqual``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns a boolean indicating whether all keys in the source collection, extracted using the keySelector, are equal.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:iFOREX.Utilities.LINQ.Operators.CustomLINQ.Replace``1(System.Collections.Generic.List{``0},System.Predicate{``0},``0)">
            <summary>
            Replaces the first item matching the specified predicate with item.
            Returns true if a matching item was found and was replaced, otherwise returns false.
            </summary>
            <param name="match">The System.Predicate delegate that defines the conditions of the element to search for.</param>
            <param name="item">The item with which to replace the matched item.</param>
        </member>
        <member name="M:iFOREX.Utilities.LINQ.Operators.CustomLINQ.Replace``1(System.Collections.Generic.IList{``0},``0,``0)">
            <summary>
            If oldItem is found in the List, replaces it with newItem. 
            Returns true if oldItem was found in the list and was replaced, otherwise returns false.
            </summary>
            <param name="oldItem">The item to replace with the new item.</param>
            <param name="newItem">The item with which to replace the old item.</param>
        </member>
        <member name="M:iFOREX.Utilities.LINQ.Operators.CustomLINQ.WhereUnsorted``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Breaks Sorting but works faster
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:iFOREX.Utilities.LINQ.Operators.CustomLINQ.Reverse``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns the list in reverse order
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:iFOREX.Utilities.LINQ.Operators.CustomLINQ.Sort``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Int64})">
            <summary>
            Hybrid Sorting for sorting of collections with numeric keys (int and long).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:iFOREX.Utilities.LINQ.Operators.CustomLINQ.RadixSort``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Int64})">
            <summary>
            Radix Sorting for fast O(K*N) sorting of collections with numeric keys (int and long).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:iFOREX.Utilities.LINQ.Operators.CustomLINQ.ShellSort``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Int64})">
            <summary>
            Shell Sorting for fast O(n*lg^2(n)) sorting of small collections with numeric keys (int and long).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:iFOREX.Utilities.LINQ.Operators.Extensions.IsEmpty(System.Collections.IEnumerable)">
            <summary>
            Returns true if the sequence contains no elements, otherwise returns false.
            </summary>
        </member>
        <member name="M:iFOREX.Utilities.LINQ.Operators.Extensions.AllEqual``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns a boolean indicating whether all keys in the source collection, extracted using the keySelector, are equal.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:iFOREX.Utilities.LINQ.Operators.Extensions.Replace``1(System.Collections.Generic.List{``0},System.Predicate{``0},``0)">
            <summary>
            Replaces the first item matching the specified predicate with item.
            Returns true if a matching item was found and was replaced, otherwise returns false.
            </summary>
            <param name="match">The System.Predicate delegate that defines the conditions of the element to search for.</param>
            <param name="item">The item with which to replace the matched item.</param>
        </member>
        <member name="M:iFOREX.Utilities.LINQ.Operators.Extensions.Replace``1(System.Collections.Generic.IList{``0},``0,``0)">
            <summary>
            If oldItem is found in the List, replaces it with newItem. 
            Returns true if oldItem was found in the list and was replaced, otherwise returns false.
            </summary>
            <param name="oldItem">The item to replace with the new item.</param>
            <param name="newItem">The item with which to replace the old item.</param>
        </member>
        <member name="M:iFOREX.Utilities.LINQ.Operators.Extensions.WhereUnsorted``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Breaks Sorting but works faster
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:iFOREX.Utilities.LINQ.Operators.Extensions.Reverse``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns the list in reverse order
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:iFOREX.Utilities.LINQ.Operators.Extensions.Sort``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Int64})">
            <summary>
            Radix Sorting for fast O(K*N) sorting of collections with numeric keys (int and long).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
    </members>
</doc>
